        -:    0:Source:Allocator.h
        -:    0:Graph:TestAllocator.gcno
        -:    0:Data:TestAllocator.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ------------------------------
        -:    2:// projects/allocator/Allocator.h
        -:    3:// Copyright (C) 2014
        -:    4:// Glenn P. Downing
        -:    5:// ------------------------------
        -:    6:
        -:    7:#ifndef Allocator_h
        -:    8:#define Allocator_h
        -:    9:
        -:   10:// --------
        -:   11:// includes
        -:   12:// --------
        -:   13:
        -:   14:#include <cassert>   // assert
        -:   15:#include <cstddef>   // ptrdiff_t, size_t
        -:   16:#include <new>       // bad_alloc, new
        -:   17:#include <stdexcept> // invalid_argument
        -:   18:#include <cmath>
        -:   19:// ---------
        -:   20:// Allocator
        -:   21:// ---------
        -:   22:
        -:   23:template <typename T, int N>
        -:   24:class Allocator {
        -:   25:    public:
        -:   26:        // --------
        -:   27:        // typedefs
        -:   28:        // --------
        -:   29:
        -:   30:        typedef T                 value_type;
        -:   31:
        -:   32:        typedef std::size_t       size_type;
        -:   33:        typedef std::ptrdiff_t    difference_type;
        -:   34:
        -:   35:        typedef       value_type*       pointer;
        -:   36:        typedef const value_type* const_pointer;
        -:   37:
        -:   38:        typedef       value_type&       reference;
        -:   39:        typedef const value_type& const_reference;
        -:   40:
        -:   41:    public:
        -:   42:        // -----------
        -:   43:        // operator ==
        -:   44:        // -----------
        -:   45:
        -:   46:        friend bool operator == (const Allocator&, const Allocator&) {
        -:   47:            return true;}                                              // this is correct
        -:   48:
        -:   49:        // -----------
        -:   50:        // operator !=
        -:   51:        // -----------
        -:   52:
        -:   53:        friend bool operator != (const Allocator& lhs, const Allocator& rhs) {
        -:   54:            return !(lhs == rhs);}
        -:   55:
        -:   56:    private:
        -:   57:        // ----
        -:   58:        // data
        -:   59:        // ----
        -:   60:
        -:   61:        char a[N];
        -:   62:
        -:   63:        // -----
        -:   64:        // valid
        -:   65:        // -----
        -:   66:
        -:   67:        /**
        -:   68:         * O(1) in space
        -:   69:         * O(n) in time
        -:   70:         * <your documentation>
        -:   71:         */
function _ZNK9AllocatorIiLi100EE5validEv called 28 returned 100% blocks executed 81%
function _ZNK9AllocatorIdLi100EE5validEv called 28 returned 100% blocks executed 81%
       56:   72:        bool valid () const {
        -:   73:    	    assert(N > 8);
       56:   74:    	    int sentinel = 0;
       56:   75:    	    int posVal = 0;
        -:   76:
       83:   77:            for(int i = 0; i < N; i += posVal + 8){
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
       83:   78:                sentinel = view(i);
call    0 returned 100%
call    1 returned 100%
       83:   79:                posVal = fabs(sentinel);
       83:   80:                if(posVal == 0 || (i + posVal + 8) > N || view(i + posVal + 4) != sentinel)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
call   13 returned 100%
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
branch 16 taken 0% (fallthrough)
branch 17 taken 100%
    #####:   81:                    return false;
       83:   82:                if(i + posVal + 7 == N - 1)
branch  0 taken 54% (fallthrough)
branch  1 taken 46%
branch  2 taken 90% (fallthrough)
branch  3 taken 10%
       56:   83:                    return true;
        -:   84:    	    }
        -:   85:            
    #####:   86:            return false;}
        -:   87:
        -:   88:        /**
        -:   89:         * O(1) in space
        -:   90:         * O(1) in time
        -:   91:         * <your documentation>
        -:   92:         */
function _ZN9AllocatorIiLi100EE4viewEi called 20 returned 100% blocks executed 100%
function _ZN9AllocatorIdLi100EE4viewEi called 16 returned 100% blocks executed 100%
       36:   93:        int& view (int i) {
       36:   94:            return *reinterpret_cast<int*>(&a[i]);}
        -:   95:
        -:   96:    public:
        -:   97:        // ------------
        -:   98:        // constructors
        -:   99:        // ------------
        -:  100:
        -:  101:        /**
        -:  102:         * O(1) in space
        -:  103:         * O(1) in time
        -:  104:         * throw a bad_alloc exception, if N is less than sizeof(T) + (2 * sizeof(int))
        -:  105:         */
function _ZN9AllocatorIiLi100EEC2Ev called 2 returned 100% blocks executed 83%
function _ZN9AllocatorIdLi100EEC2Ev called 2 returned 100% blocks executed 83%
        4:  106:        Allocator () {
        -:  107:            if(N < static_cast<int>(sizeof(T)) + 8){
        -:  108:                throw std::domain_error("Not enough space for allocater");
        -:  109:            }
        4:  110:            view(0) = N - 8;
call    0 returned 100%
call    1 returned 100%
        4:  111:            view(N - 4) = N - 8;
call    0 returned 100%
call    1 returned 100%
        4:  112:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
        -:  113:
        -:  114:        // Default copy, destructor, and copy assignment
        -:  115:        // Allocator  (const Allocator&);
        -:  116:        // ~Allocator ();
        -:  117:        // Allocator& operator = (const Allocator&);
        -:  118:
        -:  119:        // --------
        -:  120:        // allocate
        -:  121:        // --------
        -:  122:
        -:  123:        /**
        -:  124:         * O(1) in space
        -:  125:         * O(n) in time
        -:  126:         * after allocation there must be enough space left for a valid block
        -:  127:         * the smallest allowable block is sizeof(T) + (2 * sizeof(int))
        -:  128:         * choose the first block that fits
        -:  129:         * return 0, if allocation fails
        -:  130:         */
function _ZN9AllocatorIiLi100EE8allocateEm called 2 returned 100% blocks executed 39%
function _ZN9AllocatorIdLi100EE8allocateEm called 2 returned 100% blocks executed 51%
        4:  131:        pointer allocate (size_type n) {
        4:  132:    	    if(static_cast<int>(n) < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  133:                throw std::bad_alloc();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        4:  134:            else if(static_cast<int>(n) > N - 8){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  135:                throw std::bad_alloc();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  136:            }
        -:  137:    	    
        4:  138:    	    int posVal = 0;
        4:  139:    	    int aloBlocks = n * static_cast<int>(sizeof(T));
        4:  140:    	    assert(aloBlocks > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  141:
        4:  142:    	    for(int i = 0; i < N; i += posVal + 8){
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
        4:  143:                int& front_sentinel = view(i);
call    0 returned 100%
call    1 returned 100%
        4:  144:                posVal = fabs(front_sentinel);
        4:  145:                int& back_sentinel = view(i + posVal + 4);
call    0 returned 100%
call    1 returned 100%
        4:  146:                if (front_sentinel == aloBlocks) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  147:                    front_sentinel = -front_sentinel;
    #####:  148:                    back_sentinel = -back_sentinel;
    #####:  149:                    assert(valid());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####:  150:                    return reinterpret_cast<pointer>(a + i + 4);
        4:  151:                }else if(front_sentinel > 0 && front_sentinel >= static_cast<int>(sizeof(T)) + aloBlocks + 8){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
        3:  152:                    front_sentinel = -aloBlocks;
        3:  153:                    view(i + aloBlocks + 4) = -aloBlocks;
call    0 returned 100%
call    1 returned 100%
        3:  154:                    view(i + aloBlocks + 8) = back_sentinel - aloBlocks - 8;
call    0 returned 100%
call    1 returned 100%
        3:  155:                    back_sentinel = back_sentinel - aloBlocks - 8;
        3:  156:                    assert(valid());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
        3:  157:                    return reinterpret_cast<pointer>(a + i + 4);
        1:  158:                }else if (front_sentinel > 0 && front_sentinel >= aloBlocks) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        1:  159:                    front_sentinel = -front_sentinel;
        1:  160:                    back_sentinel = -back_sentinel;
        1:  161:                    assert(valid());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
        1:  162:                    return reinterpret_cast<pointer>(a + i + 4);}
        -:  163:    	    }
    #####:  164:            assert(valid());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####:  165:            throw std::bad_alloc();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  166:            return 0;}
        -:  167:
        -:  168:        // ---------
        -:  169:        // construct
        -:  170:        // ---------
        -:  171:
        -:  172:        /**
        -:  173:         * O(1) in space
        -:  174:         * O(1) in time
        -:  175:         * <your documentation>
        -:  176:         */
function _ZN9AllocatorIiLi100EE9constructEPiRKi called 11 returned 100% blocks executed 75%
function _ZN9AllocatorIdLi100EE9constructEPdRKd called 11 returned 100% blocks executed 75%
       22:  177:        void construct (pointer p, const_reference v) {
       22:  178:            new (p) T(v);                               // this is correct and exempt
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
       22:  179:            assert(valid());}                           // from the prohibition of new
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
        -:  180:
        -:  181:        // ----------
        -:  182:        // deallocate
        -:  183:        // ----------
        -:  184:
        -:  185:        /**
        -:  186:         * O(1) in space
        -:  187:         * O(1) in time
        -:  188:         * after deallocation adjacent free blocks must be coalesced
        -:  189:         * <your documentation>
        -:  190:         */
function _ZN9AllocatorIiLi100EE10deallocateEPim called 2 returned 100% blocks executed 15%
function _ZN9AllocatorIdLi100EE10deallocateEPdm called 2 returned 100% blocks executed 17%
        4:  191:        void deallocate (pointer p, size_type s = 0) {
        4:  192:            if(p == 0 || p == NULL){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        4:  193:                return;
        4:  194:            }else if(static_cast<int>(reinterpret_cast<char*>(p) - a) < 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  195:                throw std::domain_error("Not a valid pointer");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        4:  196:            }else if(static_cast<int>(reinterpret_cast<char*>(p) - a) > N - 4){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  197:                throw std::domain_error("Not a valid pointer");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        -:  198:            }
        -:  199:
        4:  200:            if(N - 8 < static_cast<int>(s * static_cast<int>(sizeof(T)))){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  201:                throw std::domain_error("Not a valid amount to deallocate");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        4:  202:            }else if(static_cast<int>(s) < 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  203:                throw std::domain_error("Not a valid amount to deallocate");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        -:  204:            }
        -:  205:
        4:  206:            int& front_sentinel = view(reinterpret_cast<char*>(p) - a - 4);
call    0 returned 100%
call    1 returned 100%
        4:  207:            int posVal = fabs(front_sentinel);
        4:  208:            int& back_sentinel = view(reinterpret_cast<char*>(p) - a + posVal);
call    0 returned 100%
call    1 returned 100%
        -:  209:
        4:  210:            if(front_sentinel != back_sentinel){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  211:                throw std::domain_error("Not a valid pointer");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        4:  212:            }else if(front_sentinel > 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  213:                throw std::domain_error("Not a valid pointer");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        -:  214:            }
        -:  215:
        4:  216:            char* front = (char*)&front_sentinel;
        4:  217:            char* back = (char*)&back_sentinel;
        -:  218:            
        4:  219:            if(front - 4 > a){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  220:                int& prev_sentinel = view(front - a - 4);
call    0 never executed
call    1 never executed
    #####:  221:                if(prev_sentinel > 0){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  222:                    view(front - a - 8 - prev_sentinel) = posVal + prev_sentinel + 8;
call    0 never executed
call    1 never executed
    #####:  223:                    back_sentinel = posVal + prev_sentinel + 8;
    #####:  224:                    front_sentinel = 0;
    #####:  225:                    prev_sentinel = 0;
        -:  226:                }else{
    #####:  227:                    front_sentinel = posVal;
    #####:  228:                    back_sentinel = posVal;
        -:  229:                    // std::cout << view(N - 4) << std::endl;
        -:  230:                }
        4:  231:            }else if(back + 4 < a + N){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        3:  232:                int& next_sentinel = view(back - a + 4);
call    0 returned 100%
call    1 returned 100%
        3:  233:                if(next_sentinel > 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  234:                    // std::cout << view(back - a + 8 + next_sentinel) << std::endl;
        -:  235:                    // std::cout << posVal + next_sentinel + 8 << std::endl;
        3:  236:                    view(back - a + 8 + next_sentinel) = posVal + next_sentinel + 8;
call    0 returned 100%
call    1 returned 100%
        3:  237:                    front_sentinel = posVal + next_sentinel + 8;
        3:  238:                    back_sentinel = 0;
        3:  239:                    next_sentinel = 0;
        -:  240:                }else{
    #####:  241:                    front_sentinel = posVal;
    #####:  242:                    back_sentinel = posVal;
        -:  243:                    // std::cout << view(N - 4) << std::endl;
        -:  244:                }
        1:  245:            }else if(back + 4 < a + N && front - 4 > a){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 never executed
branch  7 never executed
    #####:  246:                int& next_sentinel = view(back - a + 4);
call    0 never executed
call    1 never executed
    #####:  247:                int& prev_sentinel = view(front - a - 4);
call    0 never executed
call    1 never executed
    #####:  248:                if(next_sentinel > 0 && prev_sentinel > 0){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  249:                    view(front - a - 8 - prev_sentinel) = posVal + prev_sentinel + 8;
call    0 never executed
call    1 never executed
    #####:  250:                    view(back - a + 8 + next_sentinel) = posVal + next_sentinel + 8;
call    0 never executed
call    1 never executed
    #####:  251:                    next_sentinel = 0;
    #####:  252:                    prev_sentinel = 0;
    #####:  253:                    back_sentinel = 0;
    #####:  254:                    front_sentinel = 0;
    #####:  255:                }else if(prev_sentinel > 0){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  256:                    view(front - a - 8 - prev_sentinel) = posVal + prev_sentinel + 8;
call    0 never executed
call    1 never executed
    #####:  257:                    back_sentinel = posVal + prev_sentinel + 8;
    #####:  258:                    front_sentinel = 0;
    #####:  259:                    prev_sentinel = 0;
    #####:  260:                }else if(next_sentinel > 0){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  261:                    // std::cout << view(back - a + 8 + next_sentinel) << std::endl;
        -:  262:                    // std::cout << posVal + next_sentinel + 8 << std::endl;
    #####:  263:                    view(back - a + 8 + next_sentinel) = posVal + next_sentinel + 8;
call    0 never executed
call    1 never executed
    #####:  264:                    front_sentinel = posVal + next_sentinel + 8;
    #####:  265:                    back_sentinel = 0;
    #####:  266:                    next_sentinel = 0;
        -:  267:                }else{
    #####:  268:                    front_sentinel = posVal;
    #####:  269:                    back_sentinel = posVal;
        -:  270:                    // std::cout << view(N - 4) << std::endl;
        -:  271:                }
        -:  272:            }else{
        1:  273:                front_sentinel = posVal;
        1:  274:                back_sentinel = posVal;
        -:  275:                // std::cout << view(N - 4) << std::endl;
        -:  276:            }
        4:  277:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
        -:  278:
        -:  279:        // -------
        -:  280:        // destroy
        -:  281:        // -------
        -:  282:
        -:  283:        /**
        -:  284:         * O(1) in space
        -:  285:         * O(1) in time
        -:  286:         * throw an invalid_argument exception, if pointer is invalid
        -:  287:         * <your documentation>
        -:  288:         */
function _ZN9AllocatorIiLi100EE7destroyEPi called 11 returned 100% blocks executed 75%
function _ZN9AllocatorIdLi100EE7destroyEPd called 11 returned 100% blocks executed 75%
       22:  289:        void destroy (pointer p) {
        -:  290:            p->~T();               // this is correct
       22:  291:            assert(valid());}
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
        -:  292:
        -:  293:        /**
        -:  294:         * O(1) in space
        -:  295:         * O(1) in time
        -:  296:         * <your documentation>
        -:  297:         */
function _ZNK9AllocatorIiLi100EE4viewEi called 104 returned 100% blocks executed 100%
function _ZNK9AllocatorIdLi100EE4viewEi called 62 returned 100% blocks executed 100%
      166:  298:        const int& view (int i) const {
      166:  299:            return *reinterpret_cast<const int*>(&a[i]);}};
        -:  300:
        -:  301:#endif // Allocator_h
